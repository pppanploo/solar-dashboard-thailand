
import streamlit as st
import pandas as pd
import io

st.set_page_config(page_title="‚òÄÔ∏è Solar Dashboard", layout="wide")

st.title("‚òÄÔ∏è Solar Monitoring Dashboard")
st.markdown("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Inverter")

uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    required_cols = {"site", "inverter", "brand", "timestamp", "power_kw", "energy_today_kwh", "energy_total_kwh"}
    if not required_cols.issubset(df.columns):
        st.error(f"‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ: {', '.join(required_cols)}")
    else:
        df["timestamp"] = pd.to_datetime(df["timestamp"])
        df = df.sort_values("timestamp")

        site_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ã‡∏ï‡πå", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["site"].unique().tolist()))
        if site_selected != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            df = df[df["site"] == site_selected]

        inverter_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Inverter", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["inverter"].unique().tolist()))
        if inverter_selected != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            df = df[df["inverter"] == inverter_selected]

        st.markdown("### ‡∏Å‡∏£‡∏≤‡∏ü‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (kW)")
        st.line_chart(df.set_index("timestamp")["power_kw"])

        st.markdown("### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        st.dataframe(df.tail(20), use_container_width=True)

        st.markdown("### üí≥ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô (Billing)")
        rate = st.number_input("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢)", value=4.20)
        total_energy = df["energy_today_kwh"].iloc[-1]
        total_cost = total_energy * rate
        st.success(f"‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {total_energy:.2f} kWh ‚Üí ‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: {total_cost:.2f} ‡∏ö‡∏≤‡∏ó")

        st.markdown("### üì• Export ‡πÄ‡∏õ‡πá‡∏ô Excel")
        export_btn = st.button("üì§ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Excel")
        if export_btn:
            towrite = io.BytesIO()
            with pd.ExcelWriter(towrite, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="EnergyData")
            towrite.seek(0)
            st.download_button("üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel", data=towrite, file_name="energy_export.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
